Метод format следует использовать вместо f-строк в следующих случаях:
1) Совместимость с Python до 3.6 — f-строки доступны только с Python 3.6.
2) Сложное форматирование с позиционными или именованными параметрами — когда требуется передать множество значений или
использовать их несколько раз.
3) Переменное количество аргументов — если количество подставляемых значений варьируется.
4) Шаблоны, получаемые динамически — если строка формируется на основе данных, полученных из внешних источников
(например, файлов).
5) Работа со словарями — для передачи значений через словарь.

Сравнение методов

Конкатенация проста, но не гибка при работе с переменными других типов.
Оператор % — старый способ, который часто вызывает ошибки при несоответствии типов или количестве значений.
Метод format — более гибкий и удобный способ для сложного форматирования, поддерживает как позиционные, так и
именованные параметры.
F-строки — наиболее современный и предпочтительный способ, позволяющий вставлять переменные и выражения прямо в строку
с минимальными накладными расходами и высокой читаемостью.

Таким образом, f-строки рекомендуется использовать в современных версиях Python, так как они являются самым удобным
и производительным способом форматирования строк. Метод format также актуален, особенно для более сложных случаев, но
f-строки предпочтительнее для простого и понятного кода.