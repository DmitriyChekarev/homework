'''Файлы в операционной системе

В этом уроке будет рассмотрен модуль os, предоставляющий широкий набор инструментов для взаимодействия с операционной
системой. Этот модуль позволяет эффективно управлять файлами, каталогами, путями, а также выполнять различные операции,
связанные с файловой системой.

Импорт модуля os
Для начала работы с модулем необходимо импортировать его в программу с использованием команды «import os». После этого
становятся доступными все функции и возможности модуля.'''

import os

''' Для получения абсолютного пути текущей директории применяется метод os.getcwd()'''
print('Текущая директория:', os.getcwd())


''' Предположим, что требуется создать новую папку внутри текущей директории. Для этой цели используется метод 
os.mkdir(), который принимает в качестве аргумента имя создаваемой папки. Например, с помощью этого метода можно создать
папку с именем «second». После выполнения команды в директории «module_7» будет создана новая папка с названием «second»'''
# os.mkdir('second') # Создание новой папки
''' Важно: необходимо убедиться, что имя новой папки уникально в пределах текущей директории, чтобы предотвратить 
возникновение ошибок, связанных с попыткой создать папку с уже существующим именем.
    Обработка ошибок при создании существующей папки
    Если попытаться создать папку с именем, которое уже существует, метод os.mkdir() вызовет исключение 
"FileExistsError". Это происходит из-за того, что операционная система не позволяет создавать директорию с уже 
существующим именем в данной локации.'''


''' Чтобы избежать ошибки, можно использовать условие. Для проверки существования папки применяется выражение 
"if os.path.exists()", которое проверяет наличие указанного пути. Если путь существует, текущая директория меняется с 
помощью метода chdir(). В противном случае создаётся новая папка, после чего также изменяется директория.
    После выполнения этих операций вывод текущей директории покажет, что изначально программа находилась в «module_7», 
а затем переместилась в директорию «second».'''
if os.path.exists('second'):
    os.chdir('second') # Если путь существует, текущая директория меняется с помощью метода chdir().
else:
    os.mkdir('second') # В противном случае создаётся новая папка, после чего также изменяется директория.
    os.chdir('second')
print('Текущая директория:', os.getcwd()) # Теперь мы находимся в second


''' Создание вложенных папок
    Если требуется создать несколько вложенных папок, метод mkdir() не подходит. В таком случае используется метод 
os.makedirs().
    Например, чтобы создать вложенные папки, можно использовать команду "os.makedirs(r'third\fourth')". Важно учитывать 
    использование двойного обратного слэша (\\) и префикса "r" перед строкой.
    Префикс "r" позволяет интерпретатору Python корректно обрабатывать строку, избегая интерпретации символов, таких 
    как обратный слэш, как управляющих последовательностей.'''
# os.makedirs(r'third\fourth') # Если хотим создать внутри несколько папок


# ''' Каждая операционная система использует свои разделители путей.
#     В Windows для этой цели используется обратный слэш (\), который в Python является специальным символом. Поэтому его
# необходимо либо экранировать с помощью двойного слэша (\\), либо использовать префикс "r" перед строкой, чтобы Python
# правильно интерпретировал путь.
#     В Linux и macOS в качестве разделителя используется обычный слэш (/), что упрощает работу с путями, так как его не
# требуется экранировать.
#     Просмотр содержимого директории
#     Предположим, что необходимо получить список файлов и папок в текущей директории. Для этой цели используется метод
# os.listdir(), который возвращает список содержимого текущей директории).
#     Однако этот метод отображает только элементы верхнего уровня и не включает вложенные папки и файлы. Для получения
#     более полной информации о структуре директорий и вложенности следует использовать метод os.walk().'''
#print(os.listdir())


''' Для получения информации о вложенности используется метод os.walk(), в котором указывается точка ('.'), обозначающая
текущую директорию. После выполнения цикла "for i in os.walk('.')"можно увидеть, что в рабочей директории 
«second» находится папка «third», а в директории «third» имеется подпапка «fourth».'''
# for i in os.walk('.'):
#     print(i)


''' Сортировка содержимого директории
    Существует удобный способ сортировки содержимого директории. Для начала можно взять директорию «module_7» и 
скопировать её абсолютный путь.
    Далее используется метод chdir(), в который вставляется этот абсолютный путь. После выполнения команды и вывода в 
консоль, можно увидеть, что рабочая директория изменена на «module_7».'''
os.chdir(r'/module_7_Working_with_files'
         r'\module_7_5_Working_with_files')
print('Текущая директория:', os.getcwd())


''' После этого можно снова вывести содержимое рабочей директории, однако элементы будут расположены в произвольном 
порядке'''
# print(os.listdir())
''' Для решения данной проблемы применяются фильтрационные шаблоны. Для выделения файлов используется генератор 
списка, например, «file = [f for f in os.listdir() if os.path.isfile(f)]». Такой же подход можно применить для 
фильтрации директорий. После выполнения этих операций будут получены два отдельных списка: первый будет содержать только 
директории, а второй — только файлы'''
dirs = [d for d in os.listdir() if os.path.isdir(d)]
file = [f for f in os.listdir() if os.path.isfile(f)]
# print(dirs)
# print(file)


''' Запуск файлов и сбор информации о них.
    Модуль os также предоставляет возможность запускать файлы и получать информацию о них. Например, для запуска
текстового документа «sample.txt» используется метод os.startfile(), которому передается путь к файлу, например,
«os.startfile(file[0])». Здесь [0] — это индекс файла в списке file, указывающий на четвертый элемент. После
выполнения этой команды будет открыт текстовый файл.'''
# os.startfile(file[0]) # file.txt[0]


''' Чтобы получить информацию о файле, используем метод os.stat(). Например, "os.stat(file[0])"возвращает информацию о
файле, включая время создания, время обновления, размер и другие атрибуты. Чтобы получить конкретную информацию, можно
добавить нужный атрибут.
    Например "os.stat(file[0]).st_size", который вернёт размер файла.'''
print(os.stat(file[0])) # Информация о файле
print(os.stat(file[0]).st_size) # Вернёт размер файла


''' Выполнение команд в командной строке
    Помимо работы с файлами и директориями, модуль os позволяет выполнять команды, которые обычно прописываются в 
командной строке. Например, "os.system('pip install random2')" позволяет установить зависимость через терминал, если 
такой зависимости еще нет. Это может быть полезно для автоматизации задач при написании bash-скриптов.
    Bash-скрипты — это текстовые файлы, содержащие последовательность команд, которые можно выполнить в оболочке Bash 
(командной строке Unix-подобных систем). Они широко используются для автоматизации системных задач, таких как управление 
файлами, настройка серверов и запуск программ.

Заключение
    В данной лекции были рассмотрены различные функции модуля os, которые обеспечивают взаимодействие с операционной 
системой на уровне файловой системы. Мы изучили способы определения текущей директории, создания новых папок и целых 
вложенных структур каталогов.
    Также рассмотрены методы работы с содержимым директорий, как на верхнем уровне, так и рекурсивно, с использованием 
функций os.listdir() и os.walk().
    Кроме того, мы ознакомились с процессом запуска файлов, сбора информации о них и выполнения команд в командной 
    строке с помощью метода os.system().
    Модуль os предоставляет мощные инструменты для автоматизации задач, управления файлами и папками, а также выполнения 
системных команд, что делает его незаменимым инструментом для разработчиков, работающих с операционными системами.
    Для более глубокого понимания возможностей модуля os рекомендуется ознакомиться с официальной документацией по 
ссылке: https://docs.python.org/3/library/os.html.'''